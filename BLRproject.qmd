---
title: "Bayesian Linear Regression"
subtitle: "Analyzing Factors Influencing Flight Delays"
author: "Heather Anderson (Advisor: Dr. Seals)"
date: '`r Sys.Date()`'
format:
  html:
    code-fold: true
course: Capstone Projects in Data Science
toc: true
bibliography: references.bib # file contains bibtex for references
#always_allow_html: true # this allows to get PDF with HTML features
self-contained: true
execute: 
  warning: false
  message: false
editor: 
  markdown: 
    wrap: 72
theme: united
---

# **Introduction**

Bayesian linear regression (BLR) is a statistical approach that uses
Bayesian principles to model relationships between variables. It
combines prior knowledge with data to make predictions and handle
uncertainty in the estimates. Unlike traditional Frequentist methods,
BLR provides a probability-based approach for both estimating values and
making forecasts.

Linear regression itself is a key technique for predicting one variable
based on another by finding the best-fitting line that minimizes the gap
between what we predict and what actually happens [@noauthor_2021-ow].
This method is used in both Frequentist and Bayesian approaches and
forms the groundwork for more advanced analysis.

In Bayesian linear regression, Bayes' Theorem is used to update prior
beliefs about model parameters with new data, resulting in a posterior
distribution that reflects a range of possible values rather than a
single estimate [@Bayes1991-uo]. This method takes into account previous
knowledge and measures the uncertainty in predictions, giving a richer
and often more useful picture compared to the single-point estimates
from Frequentist approaches [@Koehrsen2018-ff].

The Bayesian Analysis Toolkit (BAT) provides a real-world application of
Bayesian methods, utilizing Markov Chain Monte Carlo (MCMC) techniques
for posterior sampling and model comparison. BAT allows for flexible
modeling and easy numerical integration, showing how Bayesian techniques
can be applied in practical situations [@Caldwell2009-bw].

Visualization plays a critical role in Bayesian workflows, as
highlighted by Gabry et al. [@Gabry2019-qz]. Tools such as trace plots
and Hamiltonian Monte Carlo (HMC) diagnostics are crucial for figuring
out if a model is working well and identifying any issues. In addition,
techniques like posterior predictive checks and leave-one-out (LOO)
cross-validation help fine-tune the model by testing how well it
predicts new data.

Zyphur and Oswald [@Zyphur2015-pz] compare Bayesian and Frequentist
methods, showing that Bayesian techniques often offer more dependable
results. They do this by incorporating prior knowledge and overcoming
some of the challenges that Frequentist methods face, especially with
small sample sizes. Their study highlights how Bayesian methods can
enhance predictions and help in better understanding the data.

Van de Schoot et al. [@Van_de_Schoot2021-hd] explore how Bayesian
statistics are becoming increasingly relevant and adaptable in today’s
research. They point out that, with the help of modern deep learning and
powerful computers, Bayesian methods are significantly improving the
analysis of complex data. For instance, techniques like variational
autoencoders, which combine Bayesian ideas with deep learning, are great
for managing high-dimensional data and making precise predictions. This
blend of Bayesian methods with advanced technology shows how Bayesian
analysis is evolving to tackle modern challenges and boost scientific
progress.

Gelman et al. [@Gelman2013-aj] offer a detailed look at Bayesian
methods, including how they apply to linear regression. They highlight
the advantages of using Bayesian approaches to handle uncertainty and
improve models by incorporating prior information, which in turn boosts
predictive accuracy and overall model performance.

Recent progress in variational inference, as highlighted by Blei,
Kucukelbir, and McAuliffe [@Blei2017-kg], offers scalable alternatives
to MCMC methods. Variational inference works by approximating posterior
distributions through optimization, making it a more efficient choice
for handling large datasets and complex models.

Carpenter et al. [@Carpenter2017-ul] focus on how Bayesian methods are
used in hierarchical models, particularly for complex systems. They
point out that Bayesian hierarchical modeling is especially useful for
handling data with multiple levels and capturing detailed relationships
between variables, which improves both the flexibility and the accuracy
of models in practical situations.

In conclusion, Bayesian linear regression is a powerful tool for
modeling and predicting how variables are related. It stands out because
it blends prior knowledge with a way to handle uncertainty. With the
help of advanced diagnostics, practical tools like BAT, and recent
breakthroughs in computing and deep learning, Bayesian methods show just
how flexible and effective they can be for analyzing complex data in
today’s world.

# **Methods**

## **Data Source**

The dataset utilized in this analysis is derived from the "Airline Delay
Cause" dataset, which encompasses flight arrival and delay information
for U.S. airports. The dataset includes various attributes such as the
number of arriving flights, delay reasons, cancellations, and
diversions, spanning multiple years and airlines. For this study, the
focus was specifically on data from August 2023, which consists of
171,666 observations.

## **Data Exploration**

The dataset used in this project comes from the following link:

<https://www.kaggle.com/datasets/sriharshaeedala/airline-delay?resource=download>

```{r, warning=FALSE, echo=FALSE, message=FALSE}
library(dplyr)
library(knitr)
library(ggplot2)
library(tidyr)
```

```{r, warning=FALSE, echo=FALSE, message=FALSE}
AirlineDelays <- read.csv("Airline_Delay_Cause.csv")
head(AirlineDelays)


dim(AirlineDelays)


delayed_summary <- AirlineDelays %>%
  summarise(
    total_delayed_flights = sum(arr_delay > 0, na.rm = TRUE),
    count_15_to_30 = sum(arr_delay > 15 & arr_delay <= 30, na.rm = TRUE),
    count_30_to_60 = sum(arr_delay > 30 & arr_delay <= 60, na.rm = TRUE),
    count_over_60 = sum(arr_delay > 60, na.rm = TRUE)
  )

print(delayed_summary)


# List unique carriers
unique_carriers <- AirlineDelays %>%
  distinct(carrier, carrier_name)  # You can include carrier_name for more clarity

# Display the unique carriers
print(unique_carriers)


total_arrived_flights_corrected <- AirlineDelays %>%
  group_by(carrier, airport) %>%
  summarise(arrived_flights = sum(arr_flights, na.rm = TRUE)) %>%
  summarise(total_flights = sum(arrived_flights))

print(total_arrived_flights_corrected)



```

### Variables

-   **year:** The year of the data.

-   **month:** The month of the data.

-   **carrier:** Carrier code.

-   **carrier_name:** Carrier name.

-   **airport:** Airport code.

-   **airport_name:** Airport name.

-   **arr_flights:** Number of arriving flights.

-   **arr_del15:** Number of flights delayed by 15 minutes or more.

-   **carrier_ct:** Carrier count (delay due to the carrier).

-   **weather_ct:** Weather count (delay due to weather).

-   **nas_ct:** NAS (National Airspace System) count (delay due to the
    NAS).

-   **security_ct:** Security count (delay due to security).

-   **late_aircraft_ct:** Late aircraft count (delay due to late
    aircraft arrival).

-   **arr_cancelled:** Number of flights canceled.

-   **arr_diverted:** Number of flights diverted.

-   **arr_delay:** Total arrival delay.

-   **carrier_delay:** Delay attributed to the carrier.

-   **weather_delay:** Delay attributed to weather.

-   **nas_delay:** Delay attributed to the NAS.

-   **security_delay:** Delay attributed to security.

-   **late_aircraft_delay:** Delay attributed to late aircraft arrival.

### Table 1: Summary of Flight Arrivals, Delays, Cancellations, and Diversions

```{r, warning=FALSE, echo=FALSE, message=FALSE}
# Summarize the dataset by carrier
carrier_summary <- AirlineDelays %>%
  group_by(carrier) %>%
  summarise(
    total_flights = sum(arr_flights, na.rm = TRUE),
    total_delayed_flights = sum(arr_del15, na.rm = TRUE)  # Total delayed flights (15 minutes or more)
  )

# Calculate total metrics for August
total_arrived_flights <- sum(AirlineDelays$arr_flights, na.rm = TRUE)
total_cancelled_flights <- sum(AirlineDelays$arr_cancelled, na.rm = TRUE)
total_diverted_flights <- sum(AirlineDelays$arr_diverted, na.rm = TRUE)

# Total delayed flights (where arr_del15 > 0)
total_delayed_flights <- sum(AirlineDelays$arr_del15, na.rm = TRUE)

# Breakdown of reasons for delays
delay_reasons <- AirlineDelays %>%
  summarise(
    carrier_delay = sum(carrier_ct, na.rm = TRUE),
    weather_delay = sum(weather_ct, na.rm = TRUE),
    nas_delay = sum(nas_ct, na.rm = TRUE),
    security_delay = sum(security_ct, na.rm = TRUE),
    late_aircraft_delay = sum(late_aircraft_ct, na.rm = TRUE)
  )

# Calculate percentages for delay reasons
delay_percentages <- delay_reasons / total_delayed_flights * 100

# Create the summary table with detailed sections for delays
summary_table <- data.frame(
  Characteristic = c("Total Months of Data (August)", 
                     "Total Carriers", 
                     "Total Arrived Flights (Count Data)",
                     "Total Delayed Flights (15+ min)", 
                     "  - Carrier Delays",                 
                     "  - Weather Delays",                 
                     "  - NAS Delays",                     
                     "  - Security Delays",                
                     "  - Late Aircraft Delays",           
                     "Total Cancelled Flights", 
                     "Total Diverted Flights",
                     "Cancelled Flights (%)", 
                     "Diverted Flights (%)"),
  Value = c(1,  # Total months (August)
            length(unique(AirlineDelays$carrier)), 
            round(total_arrived_flights, 2), 
            round(total_delayed_flights, 2),  
            round(delay_reasons$carrier_delay, 2),  
            round(delay_reasons$weather_delay, 2),  
            round(delay_reasons$nas_delay, 2),      
            round(delay_reasons$security_delay, 2), 
            round(delay_reasons$late_aircraft_delay, 2), 
            round(total_cancelled_flights, 2), 
            round(total_diverted_flights, 2),
            round((total_cancelled_flights / total_arrived_flights) * 100, 2), 
            round((total_diverted_flights / total_arrived_flights) * 100, 2))
)

# Format the delay reasons to include percentages in parentheses
summary_table$Characteristic[5:9] <- paste0(
  summary_table$Characteristic[5:9], 
  " (", round(delay_percentages, 2), "%)"
)

# Display the summary table
kable(summary_table, caption = "Table 1: Summary of Flight Arrivals, Delays, Cancellations, and Diversions (August Data)", 
      format.args = list(big.mark = ",", scientific = FALSE))
```

### Summary of Table 1:

Dataset 1 takes a deep dive into the airline data, offering interesting
insights into how different airlines performed. The dataset is made up
of information regarding flight arrivals and delays across various U.S.
airports, focusing specifically on data from August 2023. It includes a
total of 171,666 observations with a variety of relevant variables
related to airline performance. Overall, there were a whopping
62,146,805 arriving flights, showing just how busy the skies were.
However, not everything went smoothly; 11,375,095 of those flights were
delayed by at least 15 minutes, which is a significant number and
definitely impacts travelers.

When I looked at the reasons for these delays, it became clear that most
were due to issues on the airlines' end, with 3,565,081 flights (31.34%)
delayed because of carrier-related problems. Weather played a role too,
causing delays for 385,768 flights (3.39%). National Airspace System
delays accounted for another 3,322,433 flights (29.21%). Security delays
were relatively minor, affecting just 26,930 flights (0.24%), while late
arrivals of other aircraft were responsible for 4,074,891 flights
(35.82%).

On the cancellation front, there were 1,290,923 flights that were called
off, which is about 2.08% of all arriving flights. Additionally, 148,007
flights were diverted, a small fraction as well.

These numbers highlight the challenges that airlines face, especially
with delays stemming mainly from their own operations. While weather and
air traffic issues also contribute, it’s clear that improving airline
efficiency could make a real difference. Overall, the relatively low
rates of cancellations and diversions suggest that, despite the delays,
the month appears to have been fairly stable for airline operations.

### Table 2: Flight Summary by Airline

```{r, warning=FALSE, echo=FALSE, message=FALSE}
# Summarize the dataset by carrier
summary_by_airline <- AirlineDelays %>%
  group_by(carrier, carrier_name) %>%
  summarise(
    total_flights = sum(arr_flights, na.rm = TRUE),
    delayed_flights = sum(arr_del15, na.rm = TRUE),
    cancelled_flights = sum(arr_cancelled, na.rm = TRUE)
  ) %>%
  ungroup() %>%
  mutate(
    on_time_flights = total_flights - delayed_flights,
    on_time_percentage = round((on_time_flights / total_flights) * 100, 0),
    delayed_percentage = round((delayed_flights / total_flights) * 100, 0),
    cancelled_percentage = round((cancelled_flights / total_flights) * 100, 0)
  )

# Create a new table with selected columns
table1 <- summary_by_airline %>%
  select(carrier, carrier_name, on_time_flights, on_time_percentage, 
         delayed_flights, delayed_percentage, 
         cancelled_flights, cancelled_percentage)

# Display the summary table
kable(table1, caption = "Table 2: Flight Summary by Airline (August 2023)", 
      format.args = list(big.mark = ",", scientific = FALSE))
```

### Flight Status Proportions by Airline

```{r, warning=FALSE, echo=FALSE, message=FALSE}
# Summarize the dataset by carrier
summary_by_airline <- AirlineDelays %>%
  group_by(carrier, carrier_name) %>%
  summarise(
    total_flights = sum(arr_flights, na.rm = TRUE),
    delayed_flights = sum(arr_del15, na.rm = TRUE),
    cancelled_flights = sum(arr_cancelled, na.rm = TRUE),
    .groups = 'drop'  # Prevent grouping warnings
  )

# Calculate proportions
summary_by_airline <- summary_by_airline %>%
  mutate(
    delayed_proportion = delayed_flights / total_flights,
    cancelled_proportion = cancelled_flights / total_flights
  ) %>%
  select(carrier, carrier_name, total_flights, delayed_proportion, cancelled_proportion)

# Reshape data for plotting
summary_long <- summary_by_airline %>%
  pivot_longer(cols = c(delayed_proportion, cancelled_proportion),
               names_to = "Flight_Status",
               values_to = "Proportion")

# Create the bar plot
ggplot(summary_long, aes(x = reorder(carrier_name, -Proportion), y = Proportion, fill = Flight_Status)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Flight Status Proportions by Airline (August 2023)",
       x = "Airline",
       y = "Proportion of Flights",
       fill = "Flight Status") +
  scale_y_continuous(labels = scales::label_percent()) +  # Format y-axis as percentage
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

### Proportion of Flight Status

```{r, warning=FALSE, echo=FALSE, message=FALSE}
# Summarize the dataset by carrier
summary_by_airline <- AirlineDelays %>%
  group_by(carrier, carrier_name) %>%
  summarise(
    total_flights = sum(arr_flights, na.rm = TRUE),
    delayed_flights = sum(arr_del15, na.rm = TRUE),
    cancelled_flights = sum(arr_cancelled, na.rm = TRUE),
    .groups = 'drop'  # Prevent grouping warnings
  )

# Calculate total counts for pie chart
total_counts <- summary_by_airline %>%
  summarise(
    total_flights = sum(total_flights),
    delayed_flights = sum(delayed_flights),
    cancelled_flights = sum(cancelled_flights)
  ) %>%
  mutate(on_time_flights = total_flights - (delayed_flights + cancelled_flights)) %>%
  select(-total_flights) %>%  # Remove total_flights if not needed in the pie chart
  pivot_longer(cols = everything(), names_to = "Flight_Status", values_to = "Count")

# Create the pie chart
ggplot(total_counts, aes(x = "", y = Count, fill = Flight_Status)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y") +
  labs(title = "Proportion of Flight Status (August 2023)",
       fill = "Flight Status") +
  theme_minimal() +
  theme(axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank())

```

### Reasons for Flight Delays

```{r, warning=FALSE, echo=FALSE, message=FALSE}
# Summarize reasons for delays
delay_reasons <- AirlineDelays %>%
  summarise(
    Carrier_Delay = sum(carrier_ct, na.rm = TRUE),
    Weather_Delay = sum(weather_ct, na.rm = TRUE),
    NAS_Delay = sum(nas_ct, na.rm = TRUE),
    Security_Delay = sum(security_ct, na.rm = TRUE),
    Late_Aircraft_Delay = sum(late_aircraft_ct, na.rm = TRUE)
  )

# Reshape the data for plotting
delay_reasons_long <- pivot_longer(delay_reasons, cols = everything(), 
                                    names_to = "Reason", values_to = "Count")

# Create the bar chart
ggplot(delay_reasons_long, aes(x = Reason, y = Count, fill = Reason)) +
  geom_bar(stat = "identity") +
  labs(title = "Reasons for Flight Delays (August 2023)",
       x = "Reason for Delay",
       y = "Number of Delays") +
  scale_y_continuous(labels = scales::comma) +  # Format y-axis labels as whole numbers
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## **Data Preparation**

Prior to analysis, the dataset was cleaned and preprocessed. Missing
values were identified and handled appropriately to ensure the
robustness of the model. Specifically, we filtered out any observations
where the dependent variable (arrival delay) or independent variables
(carrier delays, weather delays, and NAS delays) were missing. The
cleaning process ensured that our dataset only included relevant entries
for the analysis.

## **Variables**

The dependent variable in this analysis was the total arrival delay
(arr_delay), measured in minutes. The independent variables included:

-   **Weather Count (weather_ct)**: The number of delays attributed to
    weather-related issues.

-   **Carrier Count (carrier_ct)**: The number of delays attributed to
    airline-related issues.

-   **NAS Count (nas_ct)**: The number of delays attributed to the
    National Airspace System.

## **Bayesian Linear Regression Model**

Bayesian Linear Regression (BLR) is a powerful statistical method that
combines the principles of linear regression with Bayesian inference.
This approach allows us to model the relationship between a dependent
variable (e.g., flight arrival delays) and one or more independent
variables (e.g., weather-related delays, carrier-related delays, and NAS
delays) while incorporating uncertainty and prior beliefs about these
relationships. To analyze the impact of the independent variables on
arrival delays, a Bayesian linear regression model was implemented using
the brms package in R [@R]. The model was formulated as follows:

$$ \text{arr\_delay} \sim \text{weather\_ct} + \text{carrier\_ct} + \text{nas\_ct} $$

This model specification allows us to assess the relationship between
arrival delays and the specified delay reasons while accounting for the
uncertainty inherent in the data.

### Key Concepts

1.  Linear Regression: The basic form of linear regression models the
    relationship between the dependent variable \\( y \\) and
    independent variables \\( x_1, x_2, \\ldots, x_n \\) using a linear
    equation: \$\$ y = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 +
    \\ldots + \\beta_n x_n + \\epsilon \$\$ Here, \\( \\beta_i \\)
    represents the coefficients that indicate the strength and direction
    of the relationships, and \\( \\epsilon \\) is the error term.
2.  Bayesian Inference: In Bayesian statistics, we update our beliefs
    about parameters using Bayes’ theorem: \$\$ P(\\beta \|
    \\text{data}) = \\frac{P(\\text{data} \| \\beta) \\cdot
    P(\\beta)}{P(\\text{data})} \$\$ This formula allows us to derive
    the posterior distribution of the parameters after observing the
    data, taking into account our prior beliefs \\( P(\\beta) \\) and
    the likelihood of the data given those parameters \\( P(\\text{data}
    \| \\beta) \\).

### Steps in Bayesian Linear Regression

1.  **Model Specification**: Define the linear relationship between the
    dependent and independent variables.

2.  **Choose Priors**: Select prior distributions for the model
    parameters, reflecting any existing knowledge about their values.

3.  **Data Collection**: Gather relevant data for the variables in the
    model.

4.  **Model Fitting**: Use computational methods, such as Markov Chain
    Monte Carlo (MCMC), to estimate the posterior distributions of the
    parameters based on the observed data.

5.  **Result Interpretation**: Analyze the posterior distributions to
    understand the relationships between variables, including estimating
    means and credible intervals.

### Advantages of Bayesian Linear Regression 

[@Zyphur2015-pz]

-   **Incorporation of Prior Knowledge**

    *-Allows for the inclusion of expert knowledge through prior
    distributions, enhancing model accuracy.*

-   **Uncertainty Quantification**

    *-Provides a full posterior distribution for each parameter,
    offering a nuanced understanding of uncertainty.*

-   **Expanded Hypotheses**

    *-Allows for a broader range of testable hypotheses.*

    *-Results interpreted intuitively, avoiding reliance on NHST.*

-   **Automatic Meta-Analyses**

    *-Combines prior findings with new data seamlessly.*

    *-Facilitates integration of existing research into new studies.*

-   **Improved Handling of Small Samples**

    *-Prior findings enhance the robustness of results.*

    *-Reduces issues associated with small-sample studies.*

-   **Complex Model Estimation**

    *-Capable of estimating models where traditional methods struggle.*

    *-Handles model complexity effectively, expanding analytical
    possibilities.*

### Conclusion

Bayesian Linear Regression offers a comprehensive framework for
analyzing the factors influencing flight delays, making it an invaluable
tool for understanding complex interactions in the aviation industry.

## **Model Fitting**

The Bayesian model was fitted using Markov Chain Monte Carlo (MCMC)
methods, with the following parameters:

-   **Chains**: 4

-   **Iterations**: 2000

-   **Warmup**: 1000

These settings were chosen to ensure adequate convergence and to provide
a stable estimate of the posterior distribution.

## **Prior Distributions**

Prior distributions for the model coefficients were specified as normal
distributions with a mean of 0 and a standard deviation of 5, reflecting
a relatively uninformative prior that allows the data to inform the
posterior distributions.

## **Model Assessment**

Model diagnostics were conducted to evaluate convergence and the quality
of the fitted model. The summary of the model output, along with trace
plots, was examined to ensure that the MCMC chains had stabilized and
adequately explored the parameter space.

## **Why Bayesian?**

Bayesian methods have some great advantages that make them a good fit
for this analysis. They allow us to bring in prior knowledge, making the
results more informed. Plus, they make it easier to understand what the
findings mean, especially when we’re working with smaller datasets.
Bayesian approaches also do a fantastic job of capturing uncertainty,
which is really important when we’re dealing with something as complex
as airline delays, where a lot of different factors are at play.
Overall, these features help us get a clearer picture of what’s going on
in the data.

# **Analysis and Results**

# **Conclusion**

# References
