---
title: "Bayesian Linear Regression"
subtitle: "Analysis of Flight Delay Data"
author: "Sara Parrish, Heather Anderson (Advisor: Dr. Seals)"
date: "`r format(Sys.time(), '%d %B, %Y')`"
date-format: "MMM D, YYYY"
format:
  revealjs:
    css: custom.css
    theme: dark
    embed-resources: true
    slide-number: false
    width: 1600
    height: 900
    df-print: paged
    html-math-method: katex
course: Capstone Projects in Data Science
bibliography: references.bib
csl: ieee.csl
self-contained: true
execute: 
  warning: false
  message: false
editor: 
  markdown: 
    wrap: 72
pdf-separate-fragments: true
fig-align: center
---

# **Introduction**

```{r, warning=FALSE, message=FALSE, echo=FALSE}
library(dplyr)
library(knitr)
library(ggplot2)
library(tidyr)
library(bayesrules)
```

```{r, warning=FALSE, message=FALSE, echo=FALSE, results='hide'}
AirlineDelays <- read.csv("Airline_Delay_Cause.csv")
head(AirlineDelays)


dim(AirlineDelays)


delayed_summary <- AirlineDelays %>%
  summarise(
    total_delayed_flights = sum(arr_delay > 0, na.rm = TRUE),
    count_15_to_30 = sum(arr_delay > 15 & arr_delay <= 30, na.rm = TRUE),
    count_30_to_60 = sum(arr_delay > 30 & arr_delay <= 60, na.rm = TRUE),
    count_over_60 = sum(arr_delay > 60, na.rm = TRUE)
  )

print(delayed_summary)


# List unique carriers
unique_carriers <- AirlineDelays %>%
  distinct(carrier, carrier_name)  # You can include carrier_name for more clarity

# Display the unique carriers
print(unique_carriers)


total_arrived_flights_corrected <- AirlineDelays %>%
  group_by(carrier, airport) %>%
  summarise(arrived_flights = sum(arr_flights, na.rm = TRUE)) %>%
  summarise(total_flights = sum(arrived_flights))

print(total_arrived_flights_corrected)
```

## Objectives

-   **Introduce Bayesian Linear Regression (BLR)**: Understand its
    principles and how it differs from traditional methods.

-   **Explain Bayesian Concepts**: Highlight Bayesâ€™ Theorem, prior
    knowledge, and posterior distributions.

-   **Discuss Practical Applications**: Show how BLR is applied in
    analyzing real-world data, like airline delays.

-   **Explore Advantages of Bayesian Methods**: Quantifying uncertainty,
    improving predictions, and handling complex data.

-   **Present Analysis Findings**: Summarize key insights from our BLR
    model on weather-related airline delays.

## What is Bayesian Linear Regression?

-   **BLR**: A statistical approach combining **prior knowledge** and
    **new data**.

-   **Goal**: Model relationships, make predictions, and handle
    **uncertainty** in estimates.

-   **Difference from Traditional Methods**: Probability-based estimates
    instead of fixed values.

    ![](statsmemecat.jpg)

## Introduction to Bayesian Linear Regression

-   Regression under the *frequentist* framework
    -   Independent variables are used to predict dependent variables
    -   Linear regression finds best-fitting line to observed data to
        make further predictions
        -   Regression parameters ($\beta$) are assumed to be fixed
    -   Only collected data is used for approximation
-   Regression under the *Bayesian* framework
    -   Independent variables are used to predict dependent variables
    -   Regression parameters ($\beta$) *are not* assumed to be fixed
    -   Collected data is used alongside prior knowledge for
        approximation

## Why Bayesian?

**Advantages of Bayesian Linear Regression[@Zyphur2015]**

-   **Incorporation of Prior Knowledge**

-   **Uncertainty Quantification**

-   **Expanded Hypotheses**

-   **Automatic Meta-Analyses**

-   **Improved Handling of Small Samples**

-   **Complex Model Estimation**

## Steps in Bayesian Linear Regression

1.  Model Specification: Define the linear relationship between the
    dependent and independent variables.

2.  Choose Priors: Select prior distributions for the model parameters,
    reflecting any existing knowledge about their values.

3.  Data Collection: Gather relevant data for the variables in the
    model.

4.  Model Fitting: Use computational methods, such as Markov Chain Monte
    Carlo (MCMC), to estimate the posterior distributions of the
    parameters based on the observed data.

5.  Result Interpretation: Analyze the posterior distributions to
    understand the relationships between variables, including estimating
    means and credible intervals.

# **Methods**

## Heather's Prior Selection & Model Specification

**Prior Selection**

-   Intercept $(\beta_0)$: $\beta_0 \sim N(0, 5^2)$ Assumes no strong
    baseline effect.

-   Slope $(\beta_1)$: $\beta_1 \sim N(0, 5^2)$ Reflects no strong prior
    belief about the relationship between weather incidents and delays.

-   Error Term $(\sigma)$: $\sigma \sim \text{Exp}(1)$ Accounts for
    variability in delays; allows flexibility.

**Model Specification**

$Y_i \mid \beta_0, \beta_1, \sigma \sim N(\mu_i, \sigma^2)$
$\mu_i = \beta_0 + \beta_1 X_i$

-   $Y_i$: Arrival delay (minutes)\
-   $X_i$: Weather-related incidents

# **Analysis & Results**

## Meet My Dataset! {.scrollable}

| **Variable**            | **Description**                    |
|-------------------------|------------------------------------|
| **year**                | The year of the data.              |
| **month**               | The month of the data.             |
| **carrier**             | Carrier code.                      |
| **carrier_name**        | Carrier name.                      |
| **airport**             | Airport code.                      |
| **airport_name**        | Airport name.                      |
| **arr_flights**         | Number of arriving flights.        |
| **arr_del15**           | Flights delayed by 15+ minutes.    |
| **carrier_ct**          | Carrier-caused delays.             |
| **weather_ct**          | Weather-caused delays.             |
| **nas_ct**              | NAS-related delays.                |
| **security_ct**         | Security-caused delays.            |
| **late_aircraft_ct**    | Delays from late aircraft.         |
| **arr_cancelled**       | Number of canceled flights.        |
| **arr_diverted**        | Number of diverted flights.        |
| **arr_delay**           | Total arrival delay.               |
| **carrier_delay**       | Delay attributed to the carrier.   |
| **weather_delay**       | Delay attributed to weather.       |
| **nas_delay**           | Delay attributed to the NAS.       |
| **security_delay**      | Delay attributed to security.      |
| **late_aircraft_delay** | Delay from late-arriving aircraft. |

## Exploring the Data

```{r, warning=FALSE, message=FALSE, echo=FALSE}
# Summarize the dataset by carrier
summary_by_airline <- AirlineDelays %>%
  group_by(carrier, carrier_name) %>%
  summarise(
    total_flights = sum(arr_flights, na.rm = TRUE),
    delayed_flights = sum(arr_del15, na.rm = TRUE),
    cancelled_flights = sum(arr_cancelled, na.rm = TRUE),
    .groups = 'drop'  # Prevent grouping warnings
  )

# Calculate total counts for pie chart
total_counts <- summary_by_airline %>%
  summarise(
    total_flights = sum(total_flights),
    delayed_flights = sum(delayed_flights),
    cancelled_flights = sum(cancelled_flights)
  ) %>%
  mutate(on_time_flights = total_flights - (delayed_flights + cancelled_flights)) %>%
  select(-total_flights) %>%  # Remove total_flights if not needed in the pie chart
  pivot_longer(cols = everything(), names_to = "Flight_Status", values_to = "Count")

# Create the pie chart
ggplot(total_counts, aes(x = "", y = Count, fill = Flight_Status)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y") +
  labs(title = "Proportion of Flight Status (August 2023)",
       fill = "Flight Status") +
  theme_minimal() +
  theme(axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank())

```

## Exploring the Data

```{r, warning=FALSE, message=FALSE, echo=FALSE}
# Summarize the dataset by carrier
summary_by_airline <- AirlineDelays %>%
  group_by(carrier, carrier_name) %>%
  summarise(
    total_flights = sum(arr_flights, na.rm = TRUE),
    delayed_flights = sum(arr_del15, na.rm = TRUE),
    cancelled_flights = sum(arr_cancelled, na.rm = TRUE),
    .groups = 'drop'  # Prevent grouping warnings
  )

# Calculate proportions
summary_by_airline <- summary_by_airline %>%
  mutate(
    delayed_proportion = delayed_flights / total_flights,
    cancelled_proportion = cancelled_flights / total_flights
  ) %>%
  select(carrier, carrier_name, total_flights, delayed_proportion, cancelled_proportion)

# Reshape data for plotting
summary_long <- summary_by_airline %>%
  pivot_longer(cols = c(delayed_proportion, cancelled_proportion),
               names_to = "Flight_Status",
               values_to = "Proportion")

# Create the bar plot
ggplot(summary_long, aes(x = reorder(carrier_name, -Proportion), y = Proportion, fill = Flight_Status)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Flight Status Proportions by Airline (August 2023)",
       x = "Airline",
       y = "Proportion of Flights",
       fill = "Flight Status") +
  scale_y_continuous(labels = scales::label_percent()) +  # Format y-axis as percentage
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Choosing Focus

```{r, warning=FALSE, message=FALSE, echo=FALSE}
# Summarize reasons for delays
delay_reasons <- AirlineDelays %>%
  summarise(
    Carrier_Delay = sum(carrier_ct, na.rm = TRUE),
    Weather_Delay = sum(weather_ct, na.rm = TRUE),
    NAS_Delay = sum(nas_ct, na.rm = TRUE),
    Security_Delay = sum(security_ct, na.rm = TRUE),
    Late_Aircraft_Delay = sum(late_aircraft_ct, na.rm = TRUE)
  )

# Reshape the data for plotting
delay_reasons_long <- pivot_longer(delay_reasons, cols = everything(), 
                                    names_to = "Reason", values_to = "Count")

# Create the bar chart
ggplot(delay_reasons_long, aes(x = Reason, y = Count, fill = Reason)) +
  geom_bar(stat = "identity") +
  labs(title = "Reasons for Flight Delays (August 2023)",
       x = "Reason for Delay",
       y = "Number of Delays") +
  scale_y_continuous(labels = scales::comma) +  # Format y-axis labels as whole numbers
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Table 1: Summary of Flight Arrivals, Delays, Cancellations, and Diversions {.scrollable}

```{r, warning=FALSE, message=FALSE, echo=FALSE}
# Summarize the dataset by carrier
carrier_summary <- AirlineDelays %>%
  group_by(carrier) %>%
  summarise(
    total_flights = sum(arr_flights, na.rm = TRUE),
    total_delayed_flights = sum(arr_del15, na.rm = TRUE)  # Total delayed flights (15 minutes or more)
  )

# Calculate total metrics for August
total_arrived_flights <- sum(AirlineDelays$arr_flights, na.rm = TRUE)
total_cancelled_flights <- sum(AirlineDelays$arr_cancelled, na.rm = TRUE)
total_diverted_flights <- sum(AirlineDelays$arr_diverted, na.rm = TRUE)

# Total delayed flights (where arr_del15 > 0)
total_delayed_flights <- sum(AirlineDelays$arr_del15, na.rm = TRUE)

# Breakdown of reasons for delays
delay_reasons <- AirlineDelays %>%
  summarise(
    carrier_delay = sum(carrier_ct, na.rm = TRUE),
    weather_delay = sum(weather_ct, na.rm = TRUE),
    nas_delay = sum(nas_ct, na.rm = TRUE),
    security_delay = sum(security_ct, na.rm = TRUE),
    late_aircraft_delay = sum(late_aircraft_ct, na.rm = TRUE)
  )

# Calculate percentages for delay reasons
delay_percentages <- delay_reasons / total_delayed_flights * 100

# Create the summary table with detailed sections for delays
summary_table <- data.frame(
  Characteristic = c("Total Months of Data (August)", 
                     "Total Carriers", 
                     "Total Arrived Flights (Count Data)",
                     "Total Delayed Flights (15+ min)", 
                     "  - Carrier Delays",                 
                     "  - Weather Delays",                 
                     "  - NAS Delays",                     
                     "  - Security Delays",                
                     "  - Late Aircraft Delays",           
                     "Total Cancelled Flights", 
                     "Total Diverted Flights",
                     "Cancelled Flights (%)", 
                     "Diverted Flights (%)"),
  Value = c(1,  # Total months (August)
            length(unique(AirlineDelays$carrier)), 
            round(total_arrived_flights, 2), 
            round(total_delayed_flights, 2),  
            round(delay_reasons$carrier_delay, 2),  
            round(delay_reasons$weather_delay, 2),  
            round(delay_reasons$nas_delay, 2),      
            round(delay_reasons$security_delay, 2), 
            round(delay_reasons$late_aircraft_delay, 2), 
            round(total_cancelled_flights, 2), 
            round(total_diverted_flights, 2),
            round((total_cancelled_flights / total_arrived_flights) * 100, 2), 
            round((total_diverted_flights / total_arrived_flights) * 100, 2))
)

# Format the delay reasons to include percentages in parentheses
summary_table$Characteristic[5:9] <- paste0(
  summary_table$Characteristic[5:9], 
  " (", round(delay_percentages, 2), "%)"
)

# Display the summary table
kable(summary_table, caption = "Table 1: Summary of Flight Arrivals, Delays, Cancellations, and Diversions (August Data)", 
      format.args = list(big.mark = ",", scientific = FALSE))
```

## Code for Model

![](Screenshot%202024-11-14%20121520.png)

## Trace Plots and Posterior Distributions

```{r, warning=FALSE, message=FALSE, echo=FALSE, results='hide'}
# Load necessary packages
library(brms)

# Clean the data: Handle missing values for relevant variables (arrival delay and weather-related incidents)
AirlineDelays1 <- AirlineDelays %>%
    filter(!is.na(arr_delay), !is.na(weather_ct))

# Define the single-predictor Bayesian model
single_predictor_model <- brm(
  arr_delay ~ weather_ct, 
  data = AirlineDelays1,  # Use the cleaned dataset here
  family = gaussian(),
  prior = c(
    prior(normal(0, 5), class = "Intercept"),
    prior(normal(0, 5), class = "b"),
    prior(exponential(1), class = "sigma")
  ),
  chains = 4, 
  iter = 2000, 
  warmup = 1000, 
  seed = 123
)
```

```{r, warning=FALSE, message=FALSE, echo=FALSE}
plot(single_predictor_model)
```

## Model Parameters and Estimates

| **Parameter** | **Estimate** | **Standard Error** | **95% Credible Interval** |
|-----------------|-----------------|-----------------|---------------------|
| Intercept     | -2116.53     | 7.67               | \[-2131.41, -2100.91\]    |
| Weather Count | 1041.97      | 2.66               | \[1036.73, 1047.15\]      |
| Sigma         | 8676.19      | 15.52              | \[8646.95, 8706.92\]      |

## Model Diagnostics and Fit Statistics {.scrollable}

| **Statistic**                                                 | **Value**                |
|--------------------------------------------------|----------------------|
| **Number of Observations**                                    | 171,426                  |
| **Model Family**                                              | Gaussian                 |
| **Formula**                                                   | `arr_delay ~ weather_ct` |
| **Iterations**                                                | 2000                     |
| **Warmup**                                                    | 1000                     |
| **Chains**                                                    | 4                        |
| **Effective Sample Size (Bulk) \[Intercept, Weather Count\]** | \[2102.722, 2000.139\]   |
| **Effective Sample Size (Tail) \[Intercept, Weather Count\]** | \[2095.692, 1858.849\]   |
| **Mean Arrival Delay (minutes)**                              | 1041.966                 |
| **Median Arrival Delay (minutes)**                            | 1041.971                 |
| **Standard Deviation of Arrival Delay**                       | 2.660956                 |
| **95% Credible Interval for Mean Arrival Delay**              | \[1036.731, 1047.15\]    |

## Posterior Distribution for Weather Count Coefficient

```{r, warning=FALSE, message=FALSE, echo=FALSE}
# Density plot for the posterior distribution of weather count coefficient
weather_posterior <- as.data.frame(posterior_samples(single_predictor_model))$b_weather_ct
ggplot(data.frame(weather_posterior), aes(x = weather_posterior)) +
  geom_density(fill = "lightblue") +
  labs(title = "Posterior Distribution of Weather Count Coefficient",
       x = "Weather Count Coefficient (Posterior)",
       y = "Density") +
  theme_minimal()

```

## **Posterior Predictive Check**

```{r, warning=FALSE, message=FALSE, echo=FALSE}
# Generate posterior predictive samples for a random subset of observations
set.seed(123)
sample_indices <- sample(1:nrow(AirlineDelays1), size = 5000)  # Adjust the sample size as needed
posterior_predictive <- posterior_predict(single_predictor_model, newdata = AirlineDelays1[sample_indices, ])

# Extract the observed arrival delays for the sampled subset
observed_arrival_delays <- AirlineDelays1$arr_delay[sample_indices]

# Calculate the mean predicted delay for each observation in the subset
mean_predicted_delays <- apply(posterior_predictive, 2, mean)

# Create a data frame for plotting
ppc_data <- data.frame(
  Type = c(rep("Observed", length(observed_arrival_delays)), rep("Predicted", length(mean_predicted_delays))),
  Arrival_Delay = c(observed_arrival_delays, mean_predicted_delays)
)

# Plot with log-transformed x-axis
ggplot(ppc_data, aes(x = Arrival_Delay, fill = Type)) +
  geom_density(alpha = 0.5) +
  labs(title = "Posterior Predictive Check: Observed vs. Predicted Arrival Delays",
       x = "Arrival Delays (minutes, log scale)",
       y = "Density") +
  theme_minimal() +
  scale_fill_manual(values = c("Observed" = "lightgray", "Predicted" = "blue")) +
  scale_x_log10()

```

# **Conclusion**

## Key Findings

-   **Intercept**: -2116.53 (95% CI: \[-2131.41, -2100.91\])

    -   Indicates significantly shorter delays without weather
        incidents.

-   **Weather Count Coefficient**: 1041.97 (95% CI: \[1036.73,
    1047.15\])

    -   A **1-unit increase in weather incidents** leads to an average
        **1042-minute delay**.

    -   Weather incidents are **infrequent but highly disruptive**.

-   **Uncertainty Measures**:

    -   Residual variability: **Standard deviation = 8676.19**.

    -   Suggests other unmeasured factors affecting delays.

-   **Model Diagnostics**:

    -   **Rhat = 1.00** for all parameters, indicating convergence.

    -   Large **effective sample sizes** ensure reliable posterior
        estimates.

## Conclusion

-   **Key Insight**:

    -   Weather-related incidents, though infrequent, have a
        **disproportionately large impact** on delay times.

    -   Highlights the need for better **weather management and
        forecasting**.

-   **Bayesian Approach**:

    -   Accounts for **uncertainty**, providing credible intervals for
        estimates.

    -   Supports **informed decision-making** in airline operations and
        policy-making.

## Discussion and Future Research

-   What other factors could be included in the model?

-   How could expanding the dataset improve insights?

-   What advanced Bayesian methods could be explored?

-   How should outliers be addressed?

-   What assumptions should be revisited?

    ![](outliermeme.jpg)

## Thank You! Questions?

![](bayesianmeme.jpg)

# **References**
